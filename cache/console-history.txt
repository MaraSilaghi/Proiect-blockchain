console.log("Fonduri totale:", dao.getTotalFunds() / 1e18, "ETH");
console.log("Fonduri totale:", Number(totalFunds) / 1e18, "ETH");
console.log("Total funds:", await dao.getTotalFunds());
console.log("Fonduri actualizate:", ethers.utils.formatEther(updatedFunds), "ETH");
const updatedFunds = await dao.getTotalFunds();
await dao.connect(donor).donate({ value: parseEther("1") });
const [_, donor] = await ethers.getSigners();
const { parseEther } = ethers;
await dao.connect(donor).donate({ value: parseEther("1") });
await dao.donate({ value: ethers.utils.parseEther("0.1") });
await dao.connect(donor).donate({ value: ethers.utils.parseEther("1") });
const [_, donor] = await ethers.getSigners();
const dao = await ethers.getContractAt("FundraisingDAO", "0xB9Af9C721Eb793635948AC5dbF1A56d4847aB1D7");
console.log("Total funds:", await dao.getTotalFunds());
console.log("Fonduri totale:", totalFunds.toString() / 1e18, "ETH");
const totalFunds = await dao.getTotalFunds();
await dao.connect(donor).donate({ value: parseEther("1") });
const [_, donor] = await ethers.getSigners();
const { parseEther } = ethers;
await dao.connect(donor).donate({ value: ethers.utils.parseEther("1") });
const [_, donor] = await ethers.getSigners();
console.log("Fonduri totale:", totalFunds.toString() / 1e18, "ETH");
console.log("Fonduri totale:", utils.formatEther(totalFunds), "ETH");
const { utils } = ethers;
console.log(ethers);
console.log("Fonduri totale:", ethers.utils.formatEther(totalFunds), "ETH");
const totalFunds = await dao.getTotalFunds();
const dao = await ethers.getContractAt("FundraisingDAO", "0xB9Af9C721Eb793635948AC5dbF1A56d4847aB1D7");
const gasPrice = await provider.getGasPrice();
const provider = ethers.provider;
console.log("Gas estimat:", estimatedGas.toString());
const estimatedGas = await ethers.provider.estimateGas(deploymentTx);
const deploymentTx = await ContractFactory.getDeployTransaction();
const ContractFactory = await ethers.getContractFactory("FundraisingDAO");
const gasPrice = await ethers.provider.getGasPrice();
console.log("Gas estimat pentru deploy:", estimatedGas.toString());
const estimatedGas = await ethers.provider.estimateGas(deploymentTx);
const deploymentTx = await ContractFactory.getDeployTransaction();
const ContractFactory = await ethers.getContractFactory("FundraisingDAO");
const estimatedGas = await ethers.provider.estimateGas(deploymentTx);
const deploymentTx = await ContractFactory.getDeployTransaction();
const estimatedGas = await ContractFactory.deploy.estimateGas();
const ContractFactory = await ethers.getContractFactory("FundraisingDAO");
const estimatedGas = await contractFactory.deploy.estimateGas();
.exit
console.log("Total funds after distribution:", (await dao.getTotalFunds()).toString());
await dao.distributeFunds(recipient, parseEther("0.5"));
const recipient = "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC";
console.log("Donors:", await dao.getDonors());
console.log("Total funds after donation:", (await dao.getTotalFunds()).toString());
await dao.connect(donor).donate({ value: parseEther("1") });
const { parseEther } = ethers;
const [_, donor] = await ethers.getSigners();
console.log("Total funds:", (await dao.getTotalFunds()).toString());
const dao = await ethers.getContractAt("FundraisingDAO", "0x5FbDB2315678afecb367f032d93F642f64180aa3");
console.log("Total funds after distribution:", (await dao.getTotalFunds()).toString());
await dao.distributeFunds(recipient, parseEther("0.5"));
const recipient = "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC";
console.log("Donors:", await dao.getDonors());
console.log("Total funds after donation:", (await dao.getTotalFunds()).toString());
await dao.connect(donor).donate({ value: parseEther("1") });
const { parseEther } = ethers;
const [_, donor] = await ethers.getSigners();
console.log("Total funds:", (await dao.getTotalFunds()).toString());
const dao = await ethers.getContractAt("FundraisingDAO", "0x5FbDB2315678afecb367f032d93F642f64180aa3");
console.log("Total funds:", (await dao.getTotalFunds()).toString());
await dao.connect(donor).donate({ value: parseEther("1") });
const { parseEther } = ethers;
await dao.connect(donor).donate({ value: ethers.utils.parseEther("1") });
const [_, donor] = await ethers.getSigners(); // donor este Account #1
const dao = await ethers.getContractAt("FundraisingDAO", "0x5FbDB2315678afecb367f032d93F642f64180aa3");